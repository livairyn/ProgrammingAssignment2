caching the Inverse of a matrix
inv <- solve(mat, ...)
## this function computes the inverse of the special "matrix" created by
## make Cache Matrix above. If the inverse has already been calculated (and the matrix has not
data <- x$get()
inv <- solve(data, ...)
inv
getinv <- function(){
inter <- givn(x)
inver %% x
}
}
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
inv <-x$getInverse()
if (!is.null(inv)) {
message("getting cached data")
return(inv)
}
mat <- x$get()
inv <- solve(mat, ...)
x$setInverse(inv)
inv
}
{
message("getting cached data")
return(inv)
}
mat <- x$get()
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
inv <-x$getInverse()
if (!is.null(inv))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
cacheSolve <- function(x, ...)
{
## Return a matrix that is the inverse of 'x'
inv <-x$getInverse()
if (!is.null(inv))
{
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setInverse(inv)
inv
}
View(cacheSolve)
View(getinv)
View(cacheSolve)
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
View(makeCacheMatrix)
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
View(cacheSolve)
View(getinv)
View(makeCacheMatrix)
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
source("~/GitHub/ProgrammingAssignment2/cachematrix.R")
